function main() {
  // ===========================================================================================
  
  var samaraSession = "";
  var accountEmail = "";

  var user = "nn";
  var day = "26"; // var year = "05"; - ok     bad - var year = "5"; bad - var year = 5;

  var month = "04"; // var year = "04"; - ok     bad - var year = "4"; bad - var year = 4;
  var year = "2021"; // var year = "2021"; - ok     bad - var year = 2021; bad - var year = 21;

  // ===========================================================================================
  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // do not change !!!!!
  // Не изменять код ниже !!!
  Logger.log("sending report");
  sendReport(year, month, day, user, samaraSession, accountEmail);
}
// do not change !!!!!
// Не изменять код ниже !!!

// ===========================================================================================
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// do not change !!!!!
// Не изменять код ниже !!!

function sendReport(year, month, day, user, samaraSession, accountEmail) {
  var dateOfStartString = year + "-" + month + "-" + day;
  var currentDate = new Date();
  var checkLimit = 30;
  
  var startDate = Date.parse(dateOfStartString);

  var dateDifference = Number(currentDate) - Number(startDate);
  var diffDays = dateDifference / 1000 / 60 / 60 / 24;


  var currentAccount = AdsApp.currentAccount();

  var accountName = currentAccount.getName();
  var accountId = currentAccount.getCustomerId();
  
  var todayCost = currentAccount.getStatsFor("TODAY").getCost();
  var todayClicks = currentAccount.getStatsFor("TODAY").getClicks();

  var yesterdayCost = currentAccount.getStatsFor("YESTERDAY").getCost();
  var yesterdayClicks = currentAccount.getStatsFor("YESTERDAY").getClicks();

  
  var totalCost = currentAccount.getStatsFor("ALL_TIME").getCost();
  var totalClicks = currentAccount.getStatsFor("ALL_TIME").getClicks();

  var table = [];
  
  var sendingData = {
    //id: accountName,
    //date: currentDate,
    type: "getreport",
    accountId: accountId,
    accountInfo:{
      accountId: accountId,
      daysInWork: diffDays,
      checkLimitDays: checkLimit,
      
      totalCost: totalCost,
      totalClicks: totalClicks,
      
      todayCost: todayCost,
      todayClicks: todayClicks,
      
      yesterdayCost: yesterdayCost,
      yesterdayClicks: yesterdayClicks,
    },
    campaigns:[],
    
    user: user,
    samaraSession: samaraSession,
    accountEmail: accountEmail,
    accountName: accountName,
    
  };

  var campaignIterator = AdsApp.campaigns().get();
  Logger.log("Total campaigns found : " + campaignIterator.totalNumEntities());
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var campaignObject = {};
    

    //var row = Object. row_prefix;
    //var row = Object.assign({}, row_prefix);
    campaignObject.campaignId = campaign.getId();
    campaignObject.name = campaign.getName();
    campaignObject.type = campaign.getAdRotationType();
    // ------------------------------------------
    campaignObject.topics = "Topics: \n";
    campaignObject.exTopics = "Excluded Topics: \n";
    campaignObject.placements = "Placements: \n";
    campaignObject.exPlacements = "Excluded Placements: \n";
    campaignObject.adsExpText = "Ads: \n";
    // ------------------------------------------
    getCInfo(campaign, campaignObject);
    // ***************************************************
    getLangs(campaign, campaignObject);
    getLocations(campaign, campaignObject);
    //getExcludedLocations(campaign, campaignObject);
    //getExcludedContent(campaign, campaignObject);
    //getPlatforms(campaign, campaignObject);
    //getCTopics(campaign, campaignObject);
    //getCExcludedTopics(campaign, campaignObject);
    //getCPlacements(campaign, campaignObject);
    //getCExcludedPlacements(campaign, campaignObject);
    // +++++++++++++++++++++++++++++++++++++++++++++++++++
    // ***************************************************
    campaignObject.adGroups = [];
    var groups = campaign.adGroups().get();
    while (groups.hasNext()) {
      var groupObject = {};
      var group = groups.next();
      var gName = group.getName();
      var gId = group.getId();
      groupObject.name = gName;
      groupObject.adGroupId = gId;
      // --------------------------------------------

      // ----------------------------------------------------------------
      getGTopics(group, groupObject);
      getGExcludedTopics(group, groupObject);
      getGPlacements(group, groupObject);
      getGExcludedPlacements(group, groupObject);
      // -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      // ----------------------------------------------------------------
      groupObject.ads = [];
      var ads = group.ads().get();
      while (ads.hasNext()) {
        var adObject = {};
        var ad = ads.next();
        adObject.adId = ad.getId();
        adObject.type = ad.getType();
        adObject.h = [];
        adObject.d = [];
        
        if (ad.isType().expandedTextAd()) {
          var expandedTextAd = ad.asType().expandedTextAd();
          adObject.h.push(expandedTextAd.getHeadlinePart1());
          adObject.h.push(expandedTextAd.getHeadlinePart2());      
          adObject.h.push(expandedTextAd.getHeadlinePart3());
          
          adObject.d.push(expandedTextAd.getDescription1());
          adObject.d.push(expandedTextAd.getDescription2());
          
          adObject.url = expandedTextAd.get;
        }
        if (ad.isType().responsiveSearchAd()) {
          var responsiveSearchAd = ad.asType().responsiveSearchAd();
          
          var _h = responsiveSearchAd.getHeadlines();
          for(var i in _h){
            adObject.h.push(_h[i].text);
          }
          
          var _d = responsiveSearchAd.getDescriptions();
          for(var i in _d){
            adObject.d.push(_d[i].text);
          }
          
        }
        adObject.isEnabled = ad.isEnabled()
        adObject.approval = ad.getPolicyApprovalStatus();
        adObject.url = ad.urls().getFinalUrl();
        adObject.type = ad.getType();
        groupObject.ads.push(Object.assign({}, adObject));
        Logger.log("Ad Object:");
        Logger.log(adObject.adId);
        Logger.log(adObject.approval);
        Logger.log(adObject.d);
        Logger.log(adObject.h);
        Logger.log(adObject.status);
        Logger.log(adObject.type);
        Logger.log(adObject.url);
      }
      // -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      campaignObject.adGroups.push(Object.assign({}, groupObject));
      Logger.log("Group Object:");
      Logger.log(groupObject)
      
    }
    // +++++++++++++++++++++++++++++++++++++++++++++++++++
    sendingData.campaigns.push(Object.assign({}, campaignObject));
  }
  Logger.log(sendingData);

  var resp1 = UrlFetchApp.fetch(
    "https://df-qszr7af-m5p-git-main-gol-5635c1.vercel.app/api/getreport",
    {
      method: "POST",
      payload: JSON.stringify(sendingData),
      headers: {
        "Content-Type": "application/json",
      },
    }
  );
  Logger.log(resp1.getContentText("utf-8"));
  Logger.log(resp1.getResponseCode());
  
}

function isTimeToSend(currentDate) {
  var ddd = Utilities.formatDate(currentDate, "GMT+06", "HH");

  if (ddd == "06") return true;
  if (ddd == "12") return true;
  if (ddd == "18") return true;
  return true;

//  return false;
}

// --------------------------------------------------------------------------------------------------
function getLangs(campaign, campaignObject) {
  campaignObject.langs = [];
  var langs = campaign.targeting().languages().get();
  while (langs.hasNext()) {
    var lang = langs.next();
    campaignObject.langs.push({name: lang.getName(), code: lang.getId()});
  }
}
// --------------------------------------------------------------------------------------------------
function getLocations(campaign, campaignObject) {
  campaignObject.locations = [];
  var locs = campaign.targeting().targetedLocations().get();
  while (locs.hasNext()) {
    var loc = locs.next();
    campaignObject.locations.push({
      name: loc.getName(),
      id: loc.getId(),
      code: loc.getCountryCode(),
      targetType: loc.getTargetType(),
      targetingStatus: loc.getTargetingStatus()
    });
  }
}
// --------------------------------------------------------------------------------------------------
function getExcludedLocations(campaign, campaignObject) {
  campaignObject.exlocations = [];
  var exlocs = campaign.targeting().excludedLocations().get();
  while (exlocs.hasNext()) {
    var exloc = exlocs.next();
    campaignObject.exlocations.push({
      name: loc.getName(),
      id: loc.getId(),
      code: loc.getCountryCode(),
      targetType: loc.getTargetType(),
      targetingStatus: loc.getTargetingStatus()
    });
  }
}

// --------------------------------------------------------------------------------------------------
function getExcludedContent(campaign, campaignObject) {
  campaignObject.excontents = [];
  var exconts = campaign.targeting().excludedContentLabels().get();
  while (exconts.hasNext()) {
    var excont = exconts.next();
    campaignObject.excontents.push({
      contentLabelType: excont.getContentLabelType(),
      id: excont.getId()
    });
  }
}

// --------------------------------------------------------------------------------------------------
function getPlatforms(campaign, campaignObject) {
  campaignObject.platforms = [];
  var platfs = campaign.targeting().platforms().get();
  while (platfs.hasNext()) {
    var platf = platfs.next();
    campaignObject.platforms.push({ name: platf.getName(), id: platf.getId()});
  }
}
// --------------------------------------------------------------------------------------------------
function getCTopics(campaign, campaignObject) {
  var cTops = campaign.display().topics().get();
  campaignObject.topics = [];
  while (cTops.hasNext()) {
    var cTop = cTops.next();
    campaignObject.topics.push({
      entityType: cTop.getEntityType(),
      id: cTop.getId(),
      topicId: cTop.getTopicId(),
      isEnabled: cTop.isEnabled()
    });
  }
}

// --------------------------------------------------------------------------------------------------
function getCExcludedTopics(campaign, campaignObject) {
  var cExTops = campaign.display().excludedTopics().get();
  campaignObject.exTopics = [];
  while (cExTops.hasNext()) {
    var cExTop = cExTops.next();
    campaignObject.exTopics.push({id: cExTop.getId(), topicId: cExTop.getTopicId()});
  }
}

// --------------------------------------------------------------------------------------------------
function getCPlacements(campaign, campaignObject) {
  var cPlacmnts = campaign.display().placements().get();
  campaignObject.placements += "  Campaigns level: \n";
  while (cPlacmnts.hasNext()) {
    var cPlacmnt = cPlacmnts.next();
    campaignObject.placements +=
      "   - " + cPlacmnt.getUrl() + " : " + cPlacmnt.getId() + "\n";
  }
}

function getCExcludedPlacements(campaign, campaignObject) {
  var cExPlacmnts = campaign.display().excludedPlacements().get();
  campaignObject.exPlacements += "  Campaigns level: \n";
  while (cExPlacmnts.hasNext()) {
    var cExPlacmnt = cExPlacmnts.next();
    campaignObject.exPlacements +=
      "   - " + cExPlacmnt.getUrl() + " : " + cExPlacmnt.getId() + "\n";
  }
}

function getCInfo(campaign, campaignObject) {
  campaignObject.isEnabled = campaign.isEnabled();
  campaignObject.name = campaign.getName();
  campaignObject.campaignId = campaign.getId();
  //campaignObject.campaignClicks = campaign.getStatsFor("ALL_TIME").getClicks();
  //campaignObject.campaignImpressions = campaign.getStatsFor("ALL_TIME").getImpressions();
  //campaignObject.campaignCtr = campaign.getStatsFor("ALL_TIME").getCtr();

  var budget = campaign.getBudget();
  var budgetAmount = budget.getAmount();
  campaignObject.budget = budgetAmount;
}

function getGTopics(group, groupObject) {
  groupObject.topics = [];
  var topics = group.display().topics().get();
  while (topics.hasNext()) {
    var topic = topics.next();
    groupObject.topics.push({ 
      topicId: topic.getTopicId(),
      id: topic.getId(),
      isEnabled: topic.isEnabled()
    });
  }
}

function getGExcludedTopics(group, groupObject) {
  var extopics = group.display().excludedTopics().get();
  groupObject.exTopics = [];
  while (extopics.hasNext()) {
    var extopic = extopics.next();
    groupObject.exTopics.push({ 
      topicId: topic.getTopicId(),
      id: topic.getId(),
      isEnabled: topic.isEnabled()
    });
  }
}
function getGPlacements(group, groupObject) {
  groupObject.placements = [];
  var plcmnts = group.display().placements().get();
  while (plcmnts.hasNext()) {
    var plcmnt = plcmnts.next();
    groupObject.placements.push({ 
      url: plcmnt.getUrl(),
      id: plcmnt.getId()
    });
  }
}
function getGExcludedPlacements(group, groupObject) {
  groupObject.exPlacements = [];
  var explcmnts = group.display().excludedPlacements().get();
  while (explcmnts.hasNext()) {
    var explcmnt = explcmnts.next();
    groupObject.exPlacements.push({ 
      url: plcmnt.getUrl(),
      id: plcmnt.getId()
    });
  }
}
// -***-*---*-*-*-*-*-*-*-**
// FINAL
// -***-*---*-*-*-*-*-*-*-**
// FINAL
// -***-*---*-*-*-*-*-*-*-**
// FINAL
// -***-*---*-*-*-*-*-*-*-**
// FINAL
// -***-*---*-*-*-*-*-*-*-**
// FINAL
// -***-*---*-*-*-*-*-*-*-**
// FINAL
// -***-*---*-*-*-*-*-*-*-**
